Міністерство освіти і науки України
Харківський національний університет радіоелектроніки

Кафедра програмної інженерії

Звіт з лабораторної роботи № 5
з дисципліни «Архітектура програмного забезпечення»
на тему “РОЗРОБКА ПРОГРАМНОЇ АРХІТЕКТУРИ ТА СТВОРЕННЯ І ВІДЛАГОДЖЕННЯ ПРОГРАМНОГО КОДУ ПРОГРАМНОГО ЗАСТОСУНКУ МОБІЛЬНОГО ПРИСТРОЮ ДЛЯ ПРОГРАМНОЇ СИСТЕМИ”

Виконав:
      студент групи ПЗПІ-22-7
   					       Сахань Дмитро Олександрович
                  15 червня 2025р.			                                              
   Перевірив:
     ст. викладач кафедри ПІ
      Сокорчук Ігор Петрович

	

	



Харків, 2025

5.1 Мета роботи


На лабораторній роботі №5 потрібно розробити мобільний програмний застосунок для будь-якої поширеної на сьогодні мобільної платформи.

5.2 Історія змін

Таблиця 1 — Історія змін та виправлень роботи

 № 	Дата	 Версія звіту 	Опис змін та виправлень
 1	 08.05.2025 	 0.1	 Створено лабораторну №4
















5.3 Хід роботи
У ході виконання лабораторної роботи було розроблено мобільний застосунок для Android-платформи, який є частиною програмної системи моніторингу та аналізу ґрунту. Застосунок реалізовано на мові Kotlin з використанням сучасного підходу Jetpack Compose для побудови інтерфейсу користувача.
На першому етапі було визначено ключові функціональні модулі мобільного застосунку:
•	Модуль введення даних про ґрунт;
•	Модуль введення метеорологічної інформації;
•	Модуль управління сезонами висадки культур;
•	Модуль рекомендацій;
•	Панель адміністратора з можливістю збереження доступів;
•	Механізм навігації через нижню панель з іконками.
На другому етапі реалізовано збереження даних у локальну базу даних SQL (Room), що забезпечує надійне зберігання інформації навіть після перезапуску застосунку. Створено сутності для ґрунтових даних, метеоданих, сезонів та адміністраторів, а також відповідні DAO-інтерфейси та репозиторії для доступу до бази.
Далі було реалізовано введення даних через текстові поля, із подальшим збереженням у базу. Для кожного модуля передбачено відображення результату збереження, що покращує взаємодію з користувачем.
Забезпечено обробку критичних подій (наприклад, надмірної вологості чи pH) за допомогою логіки аналізу введених показників.
Особливу увагу приділено локалізації: реалізовано підтримку української та англійської мов, які можуть перемикатись автоматично відповідно до мови системи Android. Всі інтерфейсні повідомлення винесено в окремі ресурси strings.xml.
Захист даних реалізовано через відокремлення ролей (звичайний користувач / адміністратор), а також можливість введення облікових даних адміністратора для доступу до керування.
На завершальному етапі було виконано тестування застосунку на віртуальному пристрої Android Emulator, що підтвердило його стабільну роботу, коректне збереження даних та відображення інтерфейсу. Застосунок успішно взаємодіє з іншими компонентами системи через спільну базу даних та потенційне розширення для взаємодії з сервером через API.	

5.4 Опис виконаної роботи
	5.4.1 Мобільний застосунок системи моніторингу та аналізу ґрунту
Мобільний застосунок побудований за принципами модульної архітектури з використанням Jetpack Compose для UI-компонентів. Основними елементами є:
•	MainActivity — кореневий компонент, що відповідає за ініціалізацію застосунку.
•	MainMenuApp — кореневий композит, який керує вкладками та навігацією.
•	Екранні компоненти (SoilAnalysisScreen, WeatherDataScreen, PlantingSeasonsScreen, RecommendationScreen, AdminScreen) — логічно розділені частини функціоналу.
Кожен з компонентів інкапсулює свій стан, UI та бізнес-логіку.

5.4.2 Програмні технології та компоненти
•	Мова програмування: Kotlin
•	UI фреймворк: Jetpack Compose
•	Система управління станом: remember, mutableStateOf
•	База даних: SQLite через бібліотеку androidx.room
•	Навігація: вкладки (Tab bar) у Scaffold
•	Інтернаціоналізація: використання stringResource або власної реалізації через словник



5.4.3 Бізнес-логіка застосунку
Основна бізнес-логіка включає:
•	введення та збереження параметрів аналізу ґрунту
•	збереження та валідація метеоінформації
•	управління сезонами висадки культур
•	перегляд рекомендацій на основі введених параметрів
•	базове адміністрування користувачів (роль, логін, пароль)

5.4.4 Захист даних
•	Паролі користувачів зберігаються хешованими (наприклад, через бібліотеку Bcrypt при використанні Room + SQL).
•	Доступ до адмін-екрану може бути обмежений перевіркою пароля.
•	Локальні дані можна шифрувати через EncryptedSharedPreferences або SQLCipher.

5.4.5 Взаємодія з іншими компонентами
•	Мобільний застосунок може передавати дані на сервер через REST API (за потреби) або синхронізуватись через локальну БД.
•	У перспективі — інтеграція з серверною частиною, яка вже реалізована для вебверсії.

5.4.6 Інтернаціоналізація
Застосунок підтримує українську та англійську мови. Реалізація можлива двома способами:
•	Через ресурси Android (res/values/strings.xml та res/values-en/strings.xml)
•	Через словник на рівні Compose-компонентів, програмний код буде в додатку B


5.4.7 Реалізована локалізація
На поточному етапі реалізовані наступні мовні варіанти:
•	Українська мова — основна мова інтерфейсу
•	Англійська мова — доступна як альтернатива (через ручне перемикання або налаштування системи Android)

5.4.8 Адміністрування
•	Вкладка "Адмін" дозволяє вводити дані користувача: логін, пароль, роль.
•	Дані зберігаються локально або можуть надсилатись до серверної частини (за потреби).

5.4.9 Приклад коду підключення Room для SQL буде продемонстрований у додатку B














ДОДАТОК А
Посилання на відеозапис та хронологічний опис доповіді

Відеозапис доповіді на https://youtu.be/wK7cOyoj47Q

00:00 - Привітання, вступ 
00:36 - Постановка задачі лабораторної 
03:10 - Опис виконаної роботи 
03:53 - Програмні технології та компоненти 
04:22 - Бізнес-логіка застосунку 
04:45 - Захист даних 
05:14 - Взаємодія з іншими компонентами 
05:55 - Адміністрування
06:09 - Діаграми 
08:40 - Показ роботи програми 
17:19 - «Дякую за увагу!»












ДОДАТОК Б
UML-діаграми
 
Рисунок Б.1 - UML діаграму прецедентів (Use Case Diagram)
 
Рисунок Б.2 - UML діаграму компонент (Component Diagram)
 
Рисунок Б.3 -  ER-модель даних (Entity–Relationship Model) мобільної платформи
 
Рисунок Б.4 - UML діаграму пакетів (Package Diagram)
 
Рисунок Б.5 – UML діаграму взаємодії (Interaction Overview Diagram)

 
Рисунок Б.6 – UML діаграму діяльності (Activity Diagram)

 
Рисунок Б.7 – UML діаграму станів (State Diagram)

   



















ДОДАТОК В
Фрагменти програмного коду
Інтернаціоналізація:
1.  val translations = mapOf(
2. "ua" to mapOf("save" to "Зберегти"),
3. "en" to mapOf("save" to "Save")
4. )

Приклад коду: Підключення Room для SQLite
1. User.kt
2. @Entity(tableName = "users")
3.data class User(
4.@PrimaryKey(autoGenerate = true) val id: Int = 0,
5. val username: String,
6.    val password: String,
7.    val role: String
8. )
9.  UserDao.kt
10. @Dao
11. interface UserDao {
12.  @Insert
13.    suspend fun insert(user: User)

14.   @Query("SELECT * FROM users WHERE username = :username")
15.    suspend fun getUser(username: String): User?
16.}
17. AppDatabase.kt
18. @Database(entities = [User::class], version = 1)
19. abstract class AppDatabase : RoomDatabase() {
20.    abstract fun userDao(): UserDao
21. }
22. Ініціалізація в MainActivity:


